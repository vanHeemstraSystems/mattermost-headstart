databases:
- name: mattermost
  plan: starter

services:
- type: pserv
  name: mattermost-minio
  env: docker
  dockerfilePath: ./minio/Dockerfile
  dockerContext: ./minio
  disk:
    name: data
    mountPath: /data
  envVars:
  - key: MINIO_ROOT_USER
    generateValue: true
  - key: MINIO_ROOT_PASSWORD
    generateValue: true

- type: web
  name: mattermost
  env: docker
  plan: starter
  dockerfilePath: ./app/Dockerfile
  dockerContext: ./app
  disk:
    name: config
    mountPath: /mattermost/config
    sizeGB: 1
  envVars:
  - key: MM_USERNAME
    fromDatabase:
      name: mattermost
      property: user
  - key: MM_PASSWORD
    fromDatabase:
      name: mattermost
      property: password
  - key: MM_DBNAME
    fromDatabase:
      name: mattermost
      property: database
  - key: MM_SQLSETTINGS_DRIVERNAME
    value: postgres
  - key: DB_HOST
    fromDatabase:
      name: mattermost
      property: host
  - key: MM_SERVICESETTINGS_LISTENADDRESS
    value: ":10000"
  - key: MM_FILESETTINGS_DRIVERNAME
    value: amazons3
  - key: MM_FILESETTINGS_AMAZONS3BUCKET
    value: mattermost
  - key: MM_FILESETTINGS_AMAZONS3ACCESSKEYID
    fromService:
      type: pserv
      name: mattermost-minio
      envVarKey: MINIO_ROOT_USER
  - key: MM_FILESETTINGS_AMAZONS3SECRETACCESSKEY
    fromService:
      type: pserv
      name: mattermost-minio
      envVarKey: MINIO_ROOT_PASSWORD
  - key: MM_FILESETTINGS_AMAZONS3ENDPOINT
    fromService:
      type: pserv
      name: mattermost-minio
      property: hostport
  - key: MM_FILESETTINGS_AMAZONS3SSL
    value: "false"
